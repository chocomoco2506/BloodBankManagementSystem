package BloodBank;


/**
* BloodBank/_BloodBankServerStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from BloodBankServer.idl
* Friday, August 2, 2024 11:25:27 PM MMT
*/

public class _BloodBankServerStub extends org.omg.CORBA.portable.ObjectImpl implements BloodBank.BloodBankServer
{

  public String[] bloodsearch (String bloodtype)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("bloodsearch", true);
                $out.write_string (bloodtype);
                $in = _invoke ($out);
                String $result[] = BloodBank.BloodBankServerPackage.DonorInfoHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return bloodsearch (bloodtype        );
            } finally {
                _releaseReply ($in);
            }
  } // bloodsearch

  public String[] nrc_check (String donor_nrc)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("nrc_check", true);
                $out.write_string (donor_nrc);
                $in = _invoke ($out);
                String $result[] = BloodBank.BloodBankServerPackage.DonorHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return nrc_check (donor_nrc        );
            } finally {
                _releaseReply ($in);
            }
  } // nrc_check

  public String[] getInventory ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getInventory", true);
                $in = _invoke ($out);
                String $result[] = BloodBank.BloodBankServerPackage.inventoryHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getInventory (        );
            } finally {
                _releaseReply ($in);
            }
  } // getInventory

  public String[] getInventoryHistory ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getInventoryHistory", true);
                $in = _invoke ($out);
                String $result[] = BloodBank.BloodBankServerPackage.historyHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getInventoryHistory (        );
            } finally {
                _releaseReply ($in);
            }
  } // getInventoryHistory

  public String getDonationHistory (String donor_nrc)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDonationHistory", true);
                $out.write_string (donor_nrc);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDonationHistory (donor_nrc        );
            } finally {
                _releaseReply ($in);
            }
  } // getDonationHistory

  public String bloodrequest (String blood_id, String receiver_name, String receiver_phone, String receive_date, String receiver_age, String receiver_gender, String receiver_address, String receiver_email)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("bloodrequest", true);
                $out.write_string (blood_id);
                $out.write_string (receiver_name);
                $out.write_string (receiver_phone);
                $out.write_string (receive_date);
                $out.write_string (receiver_age);
                $out.write_string (receiver_gender);
                $out.write_string (receiver_address);
                $out.write_string (receiver_email);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return bloodrequest (blood_id, receiver_name, receiver_phone, receive_date, receiver_age, receiver_gender, receiver_address, receiver_email        );
            } finally {
                _releaseReply ($in);
            }
  } // bloodrequest

  public String blooddonate (String bloodtype, String donor_name, String donor_phone, String donation_date, String donor_age, String donor_gender, String donor_address, String donor_email, String donor_nrc)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("blooddonate", true);
                $out.write_string (bloodtype);
                $out.write_string (donor_name);
                $out.write_string (donor_phone);
                $out.write_string (donation_date);
                $out.write_string (donor_age);
                $out.write_string (donor_gender);
                $out.write_string (donor_address);
                $out.write_string (donor_email);
                $out.write_string (donor_nrc);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return blooddonate (bloodtype, donor_name, donor_phone, donation_date, donor_age, donor_gender, donor_address, donor_email, donor_nrc        );
            } finally {
                _releaseReply ($in);
            }
  } // blooddonate

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:BloodBank/BloodBankServer:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     com.sun.corba.se.impl.orbutil.IORCheckImpl.check(str, "BloodBank._BloodBankServerStub");
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _BloodBankServerStub
